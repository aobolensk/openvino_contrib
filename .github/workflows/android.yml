name: CPU Functional Tests on Android
on:
  workflow_dispatch:
  push:
  pull_request:
    paths:
      - 'modules/**'
      - '.github/workflows/android.yml'

concurrency:
  group: >-
    ${{ github.event_name == 'push' && github.run_id || github.ref }}-android-cpu-tests
  cancel-in-progress: true

env:
  ANDROID_API_LEVEL: '30'
  ANDROID_BUILD_TOOLS_VERSION: '34.0.0'
  ANDROID_NDK_VERSION: '27.3.13750724'

permissions: read-all

jobs:
  Run_CPU_Func_Tests_Android:
    name: Run CPU Functional Tests on Android
    timeout-minutes: 600
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    env:
      CMAKE_BUILD_TYPE: 'Release'
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      OPENVINO_CONTRIB_REPO: ${{ github.workspace }}/openvino_contrib
      BUILD_DIR: ${{ github.workspace }}/openvino_build
      INSTALL_DIR: ${{ github.workspace }}/openvino_install
      TBB_INSTALL_DIR: ${{ github.workspace }}/one-tbb-install

    steps:
      - name: Checkout OpenVINO Contrib
        uses: actions/checkout@v4
        with:
          path: openvino_contrib

      - name: Clone OpenVINO
        uses: actions/checkout@v4
        with:
          repository: openvinotoolkit/openvino
          path: openvino
          submodules: 'recursive'
          ref: master

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        run: |
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
            "ndk;${{ env.ANDROID_NDK_VERSION }}" \
            "platforms;android-${{ env.ANDROID_API_LEVEL }}" \
            "build-tools;${{ env.ANDROID_BUILD_TOOLS_VERSION }}"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ccache \
            ninja-build \
            python3 \
            python3-pip \
            git \
            wget \
            scons \
            unzip

      - name: Setup Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install cmake

      - name: Setup environment variables
        run: |
          NDK_PATH="$ANDROID_SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}"
          echo "ANDROID_NDK_PATH=$NDK_PATH" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$NDK_PATH" >> $GITHUB_ENV
          echo "$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Build OneTBB for Android
        run: |
          git clone https://github.com/oneapi-src/oneTBB.git
          ccache --zero-stats
          ccache --max-size=5G
          cd oneTBB
          cmake -S . -B build-android \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_PATH/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API_LEVEL }} \
            -DCMAKE_INSTALL_PREFIX=${{ env.TBB_INSTALL_DIR }} \
            -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--undefined-version" \
            -DCMAKE_EXE_LINKER_FLAGS="-Wl,--undefined-version" \
            -DTBB_TEST=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build build-android --parallel $(nproc)
          cmake --install build-android

      - name: Build OpenVINO for Android
        run: |
          ccache --zero-stats
          ccache --max-size=5G
          cd ${{ env.OPENVINO_REPO }}
          cmake -S . -B ${{ env.BUILD_DIR }} \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_PATH/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-${{ env.ANDROID_API_LEVEL }} \
            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
            -DENABLE_TESTS=ON \
            -DENABLE_SAMPLES=OFF \
            -DENABLE_PYTHON=OFF \
            -DTBBROOT=${{ env.TBB_INSTALL_DIR }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build ${{ env.BUILD_DIR }} --parallel $(nproc) ov_cpu_func_tests

      - name: Package CPU Functional Tests
        run: |
          # Create test package directory
          mkdir -p android_test_package
          
          # Copy the test binary
          cp ${{ env.BUILD_DIR }}/bin/aarch64/Release/ov_cpu_func_tests android_test_package/
          
          # Copy required libraries
          cp -r ${{ env.INSTALL_DIR }}/runtime/lib/aarch64/* android_test_package/
          cp -r ${{ env.TBB_INSTALL_DIR }}/lib/* android_test_package/
          cp $ANDROID_NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/libc++_shared.so android_test_package/
          
          # Create execution script
          cat > android_test_package/run_tests.sh << 'EOF'
          #!/system/bin/sh
          export LD_LIBRARY_PATH=/data/local/tmp/ov_tests:/system/lib64
          cd /data/local/tmp/ov_tests
          ./ov_cpu_func_tests --gtest_output=xml:cpu_func_tests_results.xml
          EOF
          chmod +x android_test_package/run_tests.sh

      - name: Upload Android Test Package
        uses: actions/upload-artifact@v4
        with:
          name: android-cpu-func-tests
          path: android_test_package/
          retention-days: 30

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-logs
          path: |
            ${{ env.BUILD_DIR }}/CMakeCache.txt
            ${{ env.BUILD_DIR }}/CMakeFiles/CMakeError.log
            ${{ env.BUILD_DIR }}/CMakeFiles/CMakeOutput.log
          retention-days: 7